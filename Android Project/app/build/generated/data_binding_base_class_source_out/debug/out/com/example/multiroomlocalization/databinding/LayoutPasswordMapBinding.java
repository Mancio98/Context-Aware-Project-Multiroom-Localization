// Generated by view binder compiler. Do not edit!
package com.example.multiroomlocalization.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.multiroomlocalization.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutPasswordMapBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button buttonSendPassword;

  @NonNull
  public final EditText editTextInputMapName;

  @NonNull
  public final EditText passwordInputMap;

  @NonNull
  public final TextView textView3;

  private LayoutPasswordMapBinding(@NonNull LinearLayout rootView,
      @NonNull Button buttonSendPassword, @NonNull EditText editTextInputMapName,
      @NonNull EditText passwordInputMap, @NonNull TextView textView3) {
    this.rootView = rootView;
    this.buttonSendPassword = buttonSendPassword;
    this.editTextInputMapName = editTextInputMapName;
    this.passwordInputMap = passwordInputMap;
    this.textView3 = textView3;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutPasswordMapBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutPasswordMapBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_password_map, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutPasswordMapBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonSendPassword;
      Button buttonSendPassword = ViewBindings.findChildViewById(rootView, id);
      if (buttonSendPassword == null) {
        break missingId;
      }

      id = R.id.editTextInputMapName;
      EditText editTextInputMapName = ViewBindings.findChildViewById(rootView, id);
      if (editTextInputMapName == null) {
        break missingId;
      }

      id = R.id.passwordInputMap;
      EditText passwordInputMap = ViewBindings.findChildViewById(rootView, id);
      if (passwordInputMap == null) {
        break missingId;
      }

      id = R.id.textView3;
      TextView textView3 = ViewBindings.findChildViewById(rootView, id);
      if (textView3 == null) {
        break missingId;
      }

      return new LayoutPasswordMapBinding((LinearLayout) rootView, buttonSendPassword,
          editTextInputMapName, passwordInputMap, textView3);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
